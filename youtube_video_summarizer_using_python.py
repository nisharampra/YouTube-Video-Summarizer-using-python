# -*- coding: utf-8 -*-
"""YouTube Video Summarizer using python.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/18cBXdotWmbVBxdil56XQcBpRJZOIjRh4
"""

!pip install youtube-transcript-api transformers

import json
from youtube_transcript_api import YouTubeTranscriptApi
from youtube_transcript_api.formatters import JSONFormatter
from transformers import pipeline

# Function to fetch the transcript of a YouTube video
def get_video_transcript(video_id):
    try:
        transcript = YouTubeTranscriptApi.get_transcript(video_id)

        # Format the transcript as a string
        formatter = JSONFormatter()
        transcript_json_str = formatter.format_transcript(transcript)

        # Parse the JSON string into a Python dictionary
        transcript_json = json.loads(transcript_json_str)

        return transcript_json
    except Exception as e:
        print(f"Error fetching transcript: {e}")
        return None

# Function to summarize text using Hugging Face Transformers pipeline
def summarize_text(text):
    # Load summarization pipeline
    summarizer = pipeline("summarization")

    # Summarize the text in chunks (if needed, depending on length)
    max_input_length = 1024  # Token limit for models like T5 and BART
    chunk_size = max_input_length - 50  # Leave room for summary generation

    # Break the text into manageable chunks if it exceeds the token limit
    summary_parts = []
    for i in range(0, len(text), chunk_size):
        chunk = text[i:i + chunk_size]
        summary = summarizer(chunk, max_length=200, min_length=50, do_sample=False)
        summary_parts.append(summary[0]['summary_text'])

    # Combine all parts to return the final summary
    return ' '.join(summary_parts)

# Main function to summarize a YouTube video
def summarize_youtube_video(video_url):
    # Extract the video ID from the YouTube URL
    video_id = video_url.split("v=")[1].split("&")[0]

    # Get the transcript of the video
    transcript_json = get_video_transcript(video_id)
    if not transcript_json:
        print("No transcript found.")
        return None

    # Extract the text from the transcript (just the 'text' field from each entry)
    transcript_text = " ".join([entry['text'] for entry in transcript_json])

    # Summarize the transcript text
    summary = summarize_text(transcript_text)
    return summary

if __name__ == "__main__":
    video_url = "https://www.youtube.com/watch?v=dQw4w9WgXcQ"
    summary = summarize_youtube_video(video_url)

    if summary:
        print("\nSummary of the video:\n")
        print(summary)